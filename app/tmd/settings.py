"""Django settings for TMD project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import json
import os
import logging

logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATE_DIR = Path(BASE_DIR, 'templates')
LOGIN_URL = "login"

# Setup static files
STATIC_ROOT = os.environ.get("TMD_STATIC_ROOT", "/opt/tmd/static")
STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not bool(int(os.environ.get("DJANGO_PRODUCTION", 1)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY",
    "django-insecure-^cw%un^vw710_dtxsw9gmk6_0-gax^-&$=acb(0aeprmy_3kkr",
)

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost").split(",")
CSRF_TRUSTED_ORIGINS = [
    origin
    for origin in os.environ.get("DJANGO_CSRF_TRUSTED_ORIGINS", "").split(",")
    if origin
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.staticfiles",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "crispy_forms",
    "crispy_bootstrap5",
    "metrics",
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "tmd.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATE_DIR],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",

                "metrics.context_processors.apply_static_messages",
                "metrics.context_processors.get_navigation"
            ],
        },
    },
]

WSGI_APPLICATION = "tmd.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DJANGO_POSTGRESQL_DBNAME"),
        "USER": os.environ.get("DJANGO_POSTGRESQL_USER"),
        "PASSWORD": os.environ.get("DJANGO_POSTGRESQL_PASSWORD"),
        "HOST": os.environ.get("DJANGO_POSTGRESQL_HOST"),
        "PORT": os.environ.get("DJANGO_POSTGRESQL_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",  # noqa: E501
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Dash specific options
X_FRAME_OPTIONS = "SAMEORIGIN"


# Load field value aliases from CSV
VALUE_ALIASES_PATH = "tmd/value-aliases-spec.csv"

# Parse feature flags
FEATURE_FLAGS = [
    flag
    for flag in [
        segment.strip()
        for segment in os.environ.get("TMD_FEATURE_FLAGS", "").split(",")
    ]
    if flag
]

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000

# Load static messages to display on the site
try:
    STATIC_MESSAGES_DATA = os.environ.get("TMD_STATIC_MESSAGES", None)
    STATIC_MESSAGES_PATH = os.environ.get("TMD_STATIC_MESSAGES_PATH", None)
    if STATIC_MESSAGES_DATA is None:
        if STATIC_MESSAGES_PATH is None:
            STATIC_MESSAGES_DATA = "[]"
        else:
            with open(STATIC_MESSAGES_PATH, "r") as f:
                STATIC_MESSAGES_DATA = f.read()

    STATIC_MESSAGES = json.loads(STATIC_MESSAGES_DATA)
    assert isinstance(STATIC_MESSAGES, list), "STATIC_MESSAGES must be a list"
except Exception as e:
    STATIC_MESSAGES = []
    logger.error(f"Failed to load STATIC_MESSAGES: {e}")
